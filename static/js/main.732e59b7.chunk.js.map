{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","text","emojiString","id","deleteCardCallback","className","emoji","getUnicode","onClick","EMOJI_LIST","NewCardForm","sendCard","useState","cardFields","setCardFields","onCardUpdate","event","newCardFields","target","name","value","onSubmit","preventDefault","placeholder","onChange","map","i","type","listCards","cards","deleteCard","cardHolder","card","Board","url","boardName","setCards","errorMessage","setErrorMessage","useEffect","axios","get","then","response","apiCards","data","catch","error","message","post","console","log","newCardList","filter","length","delete","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.732e59b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = ({text, emojiString, id, deleteCardCallback}) => {\n\n  return(\n    <div className=\"card\">\n      <div className=\"card__content\">\n        <span className=\"card__content-text\">{text}</span>\n        <span className=\"card__content-emoji\">{emojiString ? emoji.getUnicode(emojiString) : ''}</span>\n        <button className=\"card__delete\" onClick={() => deleteCardCallback(id)}>Delete</button>\n      </div>\n\n  </div>\n  )\n\n}\n\nCard.propTypes = {\n  text: PropTypes.string,\n  emojiString: PropTypes.string,\n  id: PropTypes.number,\n  deleteCardCallback: PropTypes.func\n};\n\nexport default Card;\n","import React, { Component, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nconst NewCardForm = ({sendCard}) => {\n\n  const [cardFields, setCardFields] = useState({\n    text: '',\n    emoji: ''\n  })\n\n  const onCardUpdate = (event) => {\n    const newCardFields = {...cardFields};\n    newCardFields[event.target.name] = event.target.value;\n    setCardFields(newCardFields);\n  }\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    \n    sendCard(cardFields);\n\n    setCardFields({\n      text: '',\n      emoji: ''\n    })\n  }\n\n  const generateRadioButtons = () => {\n    return (EMOJI_LIST.map((emojiString, i) => {\n      return(\n        <label key={i}>\n        <input  name=\"emoji\" type=\"radio\" onChange={onCardUpdate} value={emojiString} />\n          {emojiString==='' ? 'None' : emoji.getUnicode(emojiString)}</label>\n      )\n    })\n    )\n  };\n  \n  return (\n    <div className=\"new-card-form\">\n      <form onSubmit={onFormSubmit} className=\"new-card-form__form\">\n        <h2 className=\"new-card-form__header\">Submit a Card!</h2>\n        <div>\n          <textarea placeholder=\"text\" name=\"text\" onChange={onCardUpdate} className=\"new-card-form__form-textarea\"></textarea>\n          {generateRadioButtons()}\n        </div>\n        <div>\n          <input type=\"submit\" value=\"Submit Card\" className=\"new-card-form__form-button\"/>\n        </div>\n      </form>\n\n    </div>\n  )\n\n};\n\n\nNewCardForm.propTypes = {\n  sendCard: PropTypes.func\n};\n\nexport default NewCardForm;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nconst listCards = (cards, deleteCard) => {\n    return (cards.map((cardHolder) => {\n        return(\n          <Card text={cardHolder.card['text']} emojiString={cardHolder.card['emoji']} id={cardHolder.card['id']} deleteCardCallback={deleteCard} key={cardHolder.card['id']}/>\n        )\n    }))\n};\n\n\nconst Board = ({url, boardName}) => {\n\n  const [cards, setCards] = useState([]);\n  const [errorMessage, setErrorMessage] = useState([]);\n\n  useEffect(() => {\n    axios.get(url + 'boards/' + boardName + '/cards')\n    .then((response) => {\n      const apiCards = response.data;\n      setCards(apiCards);\n\n    })\n    .catch((error) => {\n      setErrorMessage(error.message)\n    })\n  }, [url, boardName]);\n\n\n  const deleteCard = (id) => {\n    const newCardList = cards.filter((cardHolder) => {\n      return cardHolder.card['id'] !== id;\n    });\n  \n    if (newCardList.length < cards.length){\n      axios.delete(url + '/cards/' + id)\n      .then((response) => {\n        setErrorMessage(`Card ${id} deleted`)\n      })\n      .catch((error) => {\n        setErrorMessage(`Card ${id} not deleted`)\n      })\n      setCards(newCardList);\n    }\n  }\n\n  const addNewCard = (card) => {\n    axios.post(url + 'boards/' + boardName + '/cards', card)\n    .then((response) => {\n      console.log(response.data)\n      const newCardList = [...cards, response.data]\n      setCards(newCardList)\n      setErrorMessage('Card Added!')\n    })\n    .catch((error) => {\n      setErrorMessage(error.message)\n    })\n\n\n\n  }\n\n  return (\n    <div className=\"board\">\n      <NewCardForm sendCard={addNewCard} />\n      {errorMessage ? <div><h2>{errorMessage}</h2></div> : ''}\n      {listCards(cards, deleteCard)}    \n    </div>\n  )\n}\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/\"\n        boardName={`kareha`}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}